#!/usr/bin/perl
# grid_to_dot converts a grid to a weighted dot
# and is released under the terms of the GNU GPL version 3, or any
# later version, at your option. See the file README and COPYING for
# more information.
# Copyright 2016 by Don Armstrong <don@donarmstrong.com>.


use warnings;
use strict;

use Getopt::Long;
use Pod::Usage;

=head1 NAME

grid_to_dot - converts a grid to a weighted dot

=head1 SYNOPSIS

grid_to_dot [options]

 Options:
   --debug, -d debugging level (Default 0)
   --help, -h display this help
   --man, -m display manual

=head1 OPTIONS

=over

=item B<--debug, -d>

Debug verbosity. (Default 0)

=item B<--help, -h>

Display brief usage information.

=item B<--man, -m>

Display this manual.

=back

=head1 EXAMPLES

grid_to_dot

=cut


use vars qw($DEBUG);

my %options = (debug           => 0,
               help            => 0,
               man             => 0,
              );

GetOptions(\%options,
           'debug|d+','help|h|?','man|m');

pod2usage() if $options{help};
pod2usage({verbose=>2}) if $options{man};

$DEBUG = $options{debug};

my @USAGE_ERRORS;
# if (1) {
#     push @USAGE_ERRORS,"You must pass something";
# }

pod2usage(join("\n",@USAGE_ERRORS)) if @USAGE_ERRORS;


my %connections;

my @header;
while (<>) {
    chomp;
    my @row = split /\t/;
    if (not @header) {
        @header = @row;
        next;
    }
    my $a = shift @row;
    for my $i (0..$#row) {
        next if $a eq $header[$i];
        next if $row[$i] <= 2;
        my $first = $a;
        my $second = $header[$i];
        if ($first gt $second) {
            ($first,$second) = ($second,$first);
        }
        $connections{$first}{$second} = $row[$i];
    }
}
print "graph G {\n";
print "overlap=false\n";
print "spline=true\n";
print "sep=0.1\n";
for my $k (keys %connections) {
    for my $j (keys %{$connections{$k}}) {
        print $k.' -- '.$j. ' [weight='.$connections{$k}{$j}.",label=$connections{$k}{$j}]\n";
    }
}
print "}\n";
__END__
