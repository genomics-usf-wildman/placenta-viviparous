#!/usr/bin/make -f

SHELL=/bin/bash

# this is the env variable to tell us how many processors on this node
# we get
ifdef PBS_NUM_PPN
CORES=$(PBS_NUM_PPN)
else
CORES=8
endif

### module is how the biocluster loads specific versions; if we're not
### running there, we'll assume the correct version is installed and
### just echo what we're loading
ifdef MODULEPATH
MODULE=module
else
MODULE=echo
endif

BOWTIE_OPTIONS?=
BOWTIE_INDEX_DIR?=./
LOCAL_BOWTIE_OPTIONS?= -N 1 -L 15 -k 10 --local
ALIGNMENT_SPECIES?=$(SPECIES)
REMOTE_FILES=$(FASTA).gz $(GTF).gz
ifdef USE_TRINITY
PROTEIN_ALIGNMENT_SPECIES?=$(ALIGNMENT_SPECIES)
PROTEIN_ALIGNMENT_FASTA?=$(patsubst %.dna.toplevel.fa,%.pep.all.fa,$(FASTA))
REMOTE_FILES:=$(REMOTE_FILES) $(PROTEIN_ALIGNMENT_FASTA)
endif


TRIMMED_FASTQ_FILES=$(patsubst %.fastq.gz,%_trimmed.fastq.gz,$(FASTQ_FILES))
FASTQC_ANALYSIS_FILES=$(patsubst %.fastq.gz,%_fastqc.html,$(TRIMMED_FASTQ_FILES))

# we need to use a comma in a rule below, so this handles that
# escaping.
comma=,

call: $(SPECIES)_genes.fpkm_tracking

ifdef USE_TRINITY
$(SPECIES)_genes.fpkm_tracking: $(SPECIES)_placenta_star.bam
	$(MODULE) load cufflinks/2.2.1; \
	cufflinks -p $(CORES) $<
	for file in genes.fpkm_tracking isoforms.fpkm_tracking; do \
		mv $${file} $(SPECIES)_$${file}; \
	done;
else
$(SPECIES)_genes.fpkm_tracking: $(SPECIES)_placenta_star.bam $(GTF)
	$(MODULE) load cufflinks/2.2.1; \
	cufflinks -p $(CORES) -G $(wordlist 2,2,$^) $<
	for file in genes.fpkm_tracking isoforms.fpkm_tracking skipped.gtf transcripts.gtf; do \
		mv $${file} $(SPECIES)_$${file}; \
	done;
endif

call_local: local/$(SPECIES)_genes.fpkm_tracking

local/$(SPECIES)_genes.fpkm_tracking: $(SPECIES)_placenta_local.sorted.bam $(GTF)
	$(MODULE) load cufflinks/2.2.1; \
	cufflinks -o local -p $(CORES) -G $(wordlist 2,2,$^) $<
	for file in genes.fpkm_tracking isoforms.fpkm_tracking skipped.gtf transcripts.gtf; do \
		mv local/$${file} local/$(SPECIES)_$${file}; \
	done;

$(SPECIES)_placenta.sorted.bam: $(SPECIES)_placenta.bam
	$(MODULE) load samtools/1.0; \
	samtools sort $< -o $@ -T temp

$(SPECIES)_placenta_local.sorted.bam: $(SPECIES)_placenta_local.bam
	$(MODULE) load samtools/1.0; \
	samtools sort $< -o $@ -T temp

fastqc: $(FASTQC_ANALYSIS_FILES)

$(FASTQC_ANALYSIS_FILES): %_fastqc.html: %.fastq.gz
	$(MODULE) load fastqc/0.11.2; \
	fastqc -t $(CORES) $<

alignment: $(SPECIES)_placenta_star.bam

STAR_INDEX_DIR=$(BOWTIE_INDEX_DIR)/star/
GENOME_FASTQ=$(FASTA)
STAR_INDEX_OPTIONS?=

ifdef USE_TRINITY
GENOME_FASTQ=$(SPECIES)_trinity.Trinity.fasta
STAR_INDEX_OPTIONS=--genomeChrBinNbits 10
endif

star_indexes: $(STAR_INDEX_DIR)/SA
$(STAR_INDEX_DIR)/SA: $(GENOME_FASTQ)
	$(MODULE) load STAR/2.4.2a; \
	mkdir -p $(STAR_INDEX_DIR); \
	STAR --genomeFastaFiles  $(GENOME_FASTQ) \
		--runMode genomeGenerate \
		$(STAR_INDEX_OPTIONS) \
		--limitGenomeGenerateRAM 128849018880 \
		--runThreadN $(CORES) \
		--genomeDir $(STAR_INDEX_DIR)

STAR_OPTIONS?=
$(SPECIES)_placenta_star.bam: $(TRIMMED_FASTQ_FILES) $(STAR_INDEX_DIR)/SA
	$(MODULE) load STAR/2.4.2a; \
	mkdir -p $(SPECIES)_star; \
	STAR --outFileNamePrefix $(SPECIES)_star/ \
		--outSAMtype BAM SortedByCoordinate \
		--runThreadN $(CORES) \
        --outSAMstrandField intronMotif \
		--genomeDir $(STAR_INDEX_DIR) \
		$(STAR_OPTIONS) \
		--readFilesCommand "gzip -dc" \
		--readFilesIn $(shell echo $(TRIMMED_FASTQ_FILES)|sed 's/  */,/g');
	ln $(SPECIES)_star/Aligned.sortedByCoord.out.bam $@ -sf

$(SPECIES)_placenta.bam:  \
	$(BOWTIE_INDEX_DIR)$(ALIGNMENT_SPECIES)_bt2.1.bt2 \
	$(TRIMMED_FASTQ_FILES)
	$(MODULE) load bowtie2/2.1.0; \
	$(MODULE) load samtools/1.0; \
	bowtie2 -p $(CORES) -x $(patsubst %.1.bt2,%,$(wordlist 1,1,$^)) \
		$(if $(filter 2,$(words $(TRIMMED_FASTQ_FILES))), \
			-1 $(wordlist 1,1,$(TRIMMED_FASTQ_FILES)) -2 $(wordlist 2,2,$(TRIMMED_FASTQ_FILES)),\
			-U $(TRIMMED_FASTQ_FILES)) | \
		samtools view -b -o $@ -;

$(SPECIES)_tophat_placenta.bam: \
	$(BOWTIE_INDEX_DIR)$(ALIGNMENT_SPECIES)_bt2.1.bt2 \
	$(TRIMMED_FASTQ_FILES) $(GTF) $(BOWTIE_INDEX_DIR)$(ALIGNMENT_SPECIES)_bt2.fa
	$(MODULE) load tophat2/2.0.10; \
	tophat -G $(GTF) -p $(CORES) \
		--transcriptome-index $(BOWTIE_INDEX_DIR)$(ALIGNMENT_SPECIES)_tophat_indexes \
		-o $(SPECIES)_tophat_placenta \
		$(patsubst %.1.bt2,%,$(wordlist 1,1,$^)) \
		$(TRIMMED_FASTQ_FILES);
	ln $(SPECIES)_tophat_placenta/accepted_hits.bam $@ -sf

local_alignment: $(SPECIES)_placenta_local.bam

trim: $(TRIMMED_FASTQ_FILES)


# This is the directory where the trimmomatic adapters are kept
ifdef MODULEPATH
TRIMMOMATIC_FASTA_PATH?=/home/apps/trimmomatic/trimmomatic-0.33/adapters
TRIMMOMATIC_PE=java org.usadellab.trimmomatic.TrimmomaticPE
TRIMMOMATIC_SE=java org.usadellab.trimmomatic.TrimmomaticSE
else
TRIMMOMATIC_PE=TrimmomaticPE
TRIMMOMATIC_SE=TrimmomaticSE
TRIMMOMATIC_FASTA_PATH?=/usr/share/trimmomatic
endif

## this is the right set of adapters for the mouse sequences which
## have tons of adapter dimers and relatively bad short reads
TRIMMOMATIC_OPTIONS?=ILLUMINACLIP:$(TRIMMOMATIC_FASTA_PATH)/TruSeq2-SE.fa:2:20:10
TRIMMOMATIC_QUALITY?=

$(TRIMMED_FASTQ_FILES): $(FASTQ_FILES)
	$(MODULE) load trimmomatic/0.33; \
	$(if $(filter 2,$(words $(TRIMMED_FASTQ_FILES))), \
		$(TRIMMOMATIC_PE) \
			-threads $(CORES) \
			$(TRIMMOMATIC_QUALITY) \
			$(FASTQ_FILES) $(wordlist 1,1,$(TRIMMED_FASTQ_FILES)) /dev/null \
			$(wordlist 2,2,$(TRIMMED_FASTQ_FILES)) /dev/null, \
		$(TRIMMOMATIC_SE) \
			-threads $(CORES) \
			$(TRIMMOMATIC_QUALITY) \
			$(FASTQ_FILES) $(TRIMMED_FASTQ_FILES)) \
			$(TRIMMOMATIC_OPTIONS);

$(SPECIES)_placenta_local.bam: \
	$(BOWTIE_INDEX_DIR)$(ALIGNMENT_SPECIES)_bt2.1.bt2 \
	$(TRIMMED_FASTQ_FILES)
	$(MODULE) load bowtie2/2.1.0; \
	$(MODULE) load samtools/1.0; \
	bowtie2 -p $(CORES) $(LOCAL_BOWTIE_OPTIONS) \
		-x $(patsubst %.1.bt2,%,$(wordlist 1,1,$^)) \
		$(if $(filter 2,$(words $(TRIMMED_FASTQ_FILES))), \
			-1 $(wordlist 1,1,$(TRIMMED_FASTQ_FILES)) -2 $(wordlist 2,2,$(TRIMMED_FASTQ_FILES)),\
			-U $(TRIMMED_FASTQ_FILES)) | \
		samtools view -b -o $@ -;

ifdef USE_TRINITY
trinity: $(SPECIES)_trinity.Trinity.fasta

$(SPECIES)_trinity.Trinity.fasta: $(FASTQ_FILES)
	$(MODULE) load samtools/0.1.19; \
	$(MODULE) load trinityrnaseq/r2014-07-17; \
	Trinity --seqType fq \
	$(if $(filter 2,$(words $(FASTQ_FILES))), \
		--left $(wordlist 1,1,$(FASTQ_FILES)) --right $(wordlist 2,2,$(FASTQ_FILES)),\
		--single $(FASTQ_FILES)) \
		--CPU $(CORES) --trimmomatic --output $(SPECIES)_trinity --JM 10G;
	mv $(SPECIES)_trinity/Trinity.fasta $@

$(SPECIES)_trinity_bt2.1.bt2: $(SPECIES)_trinity.Trinity.fasta
	$(MODULE) load bowtie2/2.1.0; \
	bowtie2-build $< $(SPECIES)_trinity_bt2

TRINITY_PATH?=/home/apps/trinityrnaseq/trinityrnaseq_r2014-07-17/


trinity_align: $(SPECIES)_trinity_align_rsem_isoforms.txt
$(SPECIES)_trinity_align_rsem_isoforms.txt: $(SPECIES)_trinity.Trinity.fasta
	$(MODULE) load samtools/0.1.19; \
	$(MODULE) load bowtie; \
	$(MODULE) load trinityrnaseq/r2014-07-17; \
	$(TRINITY_PATH)/util/align_and_estimate_abundance.pl \
	--transcripts $(SPECIES)_trinity.Trinity.fasta \
	$(if $(filter 2,$(words $(TRIMMED_FASTQ_FILES))), \
		--left $(wordlist 1,1,$(TRIMMED_FASTQ_FILES)) --right $(wordlist 2,2,$(TRIMMED_FASTQ_FILES)),\
		--single $(TRIMMED_FASTQ_FILES)) \
		--seqType fq \
		--est_method RSEM \
		--aln_method bowtie \
		--prep_reference \
        --output_dir $(SPECIES)_trinity_align;
	mv $(SPECIES)_trinity_align/RSEM.isoforms.results $@


$(PROTEIN_ALIGNMENT_SPECIES)_diamond.dmnd: $(PROTEIN_ALIGNMENT_FASTA)
	$(MODULE) load diamond/0.7.9 ; \
	diamond makedb --threads $(CORES) \
		--in $(PROTEIN_ALIGNMENT_FASTA) \
		--db $(PROTEIN_ALIGNMENT_SPECIES)_diamond;

$(SPECIES)_trinity_diamond.daa: $(SPECIES)_trinity.Trinity.fasta \
	$(PROTEIN_ALIGNMENT_SPECIES)_diamond.dmnd
	$(MODULE) load diamond/0.7.9 ; \
	diamond blastx --db $(PROTEIN_ALIGNMENT_SPECIES)_diamond \
		--threads $(CORES) \
		--query $(SPECIES)_trinity.Trinity.fasta \
        --daa $(SPECIES)_trinity_diamond

diamond: $(SPECIES)_trinity_diamond.txt

$(SPECIES)_trinity_diamond.txt: $(SPECIES)_trinity_diamond.daa
	$(MODULE) load diamond/0.7.9 ; \
	diamond view --threads $(CORES) --daa $< > $@

$(PROTEIN_ALIGNMENT_FASTA).gz:
	rsync -avP "rsync://ftp.ensembl.org/ensembl/pub/release-80/fasta/$(PROTEIN_ALIGNMENT_SPECIES)/pep/$(PROTEIN_ALIGNMENT_FASTA).gz" $@

$(PROTEIN_ALIGNMENT_FASTA): $(PROTEIN_ALIGNMENT_FASTA).gz
	gzip -dc $< > $@


blastdb: $(PROTEIN_ALIGNMENT_SPECIES)_prot.phr

$(PROTEIN_ALIGNMENT_SPECIES)_prot.phr: $(PROTEIN_ALIGNMENT_FASTA)
	$(MODULE) load blast+ ; \
	makeblastdb -dbtype prot -title $(PROTEIN_ALIGNMENT_SPECIES) \
		-in $(PROTEIN_ALIGNMENT_FASTA) \
		-out $(PROTEIN_ALIGNMENT_SPECIES)_prot;


endif

bowtie_indexes: $(ALIGNMENT_SPECIES)_bt2.1.bt2

$(ALIGNMENT_SPECIES)_bt2.1.bt2: $(FASTA)
	$(MODULE) load bowtie2/2.1.0; \
	bowtie2-build $< $(ALIGNMENT_SPECIES)_bt2

$(BOWTIE_INDEX_DIR)$(ALIGNMENT_SPECIES)_bt2.fa: $(FASTA)
	rm -f $@
	ln $< $@

ifdef NOTENSEMBL
else
$(FASTA): $(FASTA).gz
	gzip -dc $< > $@

$(GTF): $(GTF).gz
	gzip -dc $< > $@

remote_files: $(REMOTE_FILES)

fasta: $(FASTA)

gtf: $(GTF)

$(FASTA).gz:
	rsync -avP "rsync://ftp.ensembl.org/ensembl/pub/release-80/fasta/$(ALIGNMENT_SPECIES)/dna/$(FASTA).gz" $@

$(GTF).gz:
	rsync -avP "rsync://ftp.ensembl.org/ensembl/pub/release-80/gtf/$(ALIGNMENT_SPECIES)/$(GTF).gz" $@
endif
